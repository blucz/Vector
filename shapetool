ORIGINX=0.5
ORIGINY=0.5

if [ x$2 == x ]; then
echo "usage: $0 shapename filename.svg [originx] [originy]"
echo
echo '    This program takes in an SVG file (see notes about the SVG file'
echo '    below) and outputs a C data structure that can be passed to '
echo '    vector_shape_draw_shape()' 
echo
echo '    The origin x and y is numerical value for where in the drawing the'
echo '    center should be. If not specified, the default is 0.5 for both.'
echo
echo '    You want to get a SVG file with 1 <path d="........."/> in it. Only'
echo '    lines are supported, no curves. The easiest way to draw that is to'
echo '    open Adobe Illustrator, draw what you want using the pen tool, then'
echo '    select all your segments. Go to the menu Object > Compound Paths'  
echo '    and select "Make". Then File > Save As..., pick SVG, and on the next'
echo '    popup, pick a profile of SVG 1.0.'
echo
exit 1
fi
if [ x$3 != x ]; then ORIGINX=$3; fi
if [ x$4 != x ]; then ORIGINY=$4; fi

cat $2 | tr -d \\n | sed -e '
s// /g
s/.*\(<path[^>]*>\).*/\1/
s/,/ /g
s/-/ -/g
s/[ 	][ 	]*/ /g
s/.*d="\([^"]*\)".*/\1/
s/\([A-Za-z]\)/\
\1 /g
' | awk -v originx=$ORIGINX -v originy=$ORIGINY -v name=$1 '

BEGIN {
    cpx = 0
    cpy = 0
    icpx = 0
    icpy = 0
    cn = 0
    drawn = 0
    addn = 0
}

function add(v, x, y) {
#    print v " " x " " y
    data[addn, 1] = v
    data[addn, 2] = x
    data[addn, 3] = y
    addn++
}

{
#    print $0

    # skip blank lines
    if ($0 == "") {
        next

    } else if ($1 == "M" || $1 == "m") {
        if (drawn == 1) {
            add("end_draw", 0, 0)
            drawn = 0
            icpx = 0
            icpy = 0
        }
            cn = 0
        x = cpx
        y = cpy
        for (i = 2; i <= NF; i += 2) {
            if ($1 == "m") {
                x += $i
                y += $(i+1)
            } else {
                x = $i
                y = $(i+1)
            }
        }
#        print "move " x " " y
        cpx = x
        cpy = y

    } else if ($1 == "L" || $1 == "l") {
        if (drawn == 0) add("begin_draw", cpx, cpy)
        x = cpx
        y = cpy
        for (i = 2; i <= NF; i += 2) {
            if ($1 == "l") {
                x += $i
                y += $(i+1)
            } else {
                x = $i
                y = $(i+1)
            }
            add("draw_to", x, y)
        }
        cpx = x
        cpy = y
        drawn = 1

    } else if ($1 == "H" || $1 == "h") {
        if (drawn == 0) add("begin_draw", cpx, cpy)
        x = cpx
        y = cpy
        for (i = 2; i <= NF; i += 1) {
            if ($1 == "h") {
                x += $i
            } else {
                x = $i
            }
            add("draw_to", x, y)
        }
        cpx = x
        cpy = y
        drawn = 1

    } else if ($1 == "V" || $1 == "v") {
        if (drawn == 0) add("begin_draw", cpx, cpy)
        x = cpx
        y = cpy
        for (i = 2; i <= NF; i += 1) {
            if ($1 == "v") {
                y += $i
            } else {
                y = $i
            }
            add("draw_to", x, y)
        }
        cpx = x
        cpy = y
        drawn = 1

    } else if ($1 == "Z" || $1 == "z") {
        if (cpx != icpx || cpy != icpy)
            add("draw_to", icpx, icpy)

    } else {
        print "Unknown SVG path command. Only M,L,V,H,Z are supported. Command encountered is: " $1
        exit 1
    }
    if (cn == 0) {
        icpx = cpx
        icpy = cpy
    }
    cn++
}

END {
    if (drawn == 1) {
        add("end_draw", 0, 0)
    }

    minx = "unset"
    miny = "unset"
    maxx = "unset"
    maxy = "unset"

    cnt = 0
    total = 0
    begin = 0
    for (i = 0; i < addn; i++) {
        if (data[i, 1] != "end_draw") {
            if (minx == "unset" || minx > data[i, 2]) minx = data[i, 2]
            if (miny == "unset" || miny > data[i, 3]) miny = data[i, 3]
            if (maxx == "unset" || maxx < data[i, 2]) maxx = data[i, 2]
            if (maxy == "unset" || maxy < data[i, 3]) maxy = data[i, 3]
            cnt++
            total++
        } else {
            data[begin, 4] = cnt
            cnt = 0
            begin = i+1
        }
    }

#    print "minx " minx
#    print "maxx " maxx
#    print "miny " miny
#    print "maxy " maxy

    width = maxx - minx
    height = maxy - miny

    for (i = 0; i < addn; i++) {
        if (data[i, 1] != "end_draw") {
            data[i, 2] = (data[i, 2] - minx) / width - originx
            data[i, 3] = (data[i, 3] - miny) / height - originy
        }
    }

    print "double " name "[] = {"
    print "    /* original size: " width "x" height ", aspect ratio: " width / height " */"
    print "    " total ", /* total vertex count. */"
    for (i = 0; i < addn; i++) {
        if (data[i, 1] == "begin_draw") {
            print "    " data[i,4] ", /* segment vertex count */"
            print "    " data[i,2] ", " data[i,3] ","
        } else if (data[i, 1] == "end_draw") {
            print "    /* eos */"
        } else {
            print "    " data[i,2] ", " data[i,3] ","
        }
    }
    print "    /* -- end of drawing -- */"
    print "};"
}'
